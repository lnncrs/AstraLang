(parse (block (statement (functionCall assert ( (expression (expression true) || (expression false)) )) ;) (statement (functionCall assert ( (expression ! (expression false)) )) ;) (statement (functionCall assert ( (expression (expression true) && (expression true)) )) ;) (statement (functionCall assert ( (expression (expression ! (expression true)) || (expression ! (expression false))) )) ;) (statement (functionCall assert ( (expression (expression true) && (expression ( (expression (expression true) || (expression false)) ))) )) ;) (statement (functionCall assert ( (expression (expression 1) < (expression 2)) )) ;) (statement (functionCall assert ( (expression (expression 666) >= (expression 666)) )) ;) (statement (functionCall assert ( (expression (expression - (expression 5)) > (expression - (expression 6))) )) ;) (statement (functionCall assert ( (expression (expression 0) >= (expression - (expression 1))) )) ;) (statement (functionCall assert ( (expression (expression 'a') < (expression 's')) )) ;) (statement (functionCall assert ( (expression (expression 'sw') <= (expression 'sw')) )) ;) (statement (functionCall assert ( (expression (expression (expression 1) + (expression 999)) == (expression 1000)) )) ;) (statement (functionCall assert ( (expression (expression (expression (list [ (exprList (expression 1)) ])) + (expression 1)) == (expression (list [ (exprList (expression 1) , (expression 1)) ]))) )) ;) (statement (functionCall assert ( (expression (expression (expression 2) - (expression - (expression 2))) == (expression 4)) )) ;) (statement (functionCall assert ( (expression (expression (expression - (expression 1)) + (expression 1)) == (expression 0)) )) ;) (statement (functionCall assert ( (expression (expression (expression 1) - (expression 50)) == (expression - (expression 49))) )) ;) (statement (functionCall assert ( (expression (expression (expression (list [ (exprList (expression 1) , (expression 2) , (expression 3) , (expression 4) , (expression 5)) ])) - (expression 4)) == (expression (list [ (exprList (expression 1) , (expression 2) , (expression 3) , (expression 5)) ]))) )) ;) (statement (functionCall assert ( (expression (expression (expression 3) * (expression 50)) == (expression 150)) )) ;) (statement (functionCall assert ( (expression (expression (expression 4) / (expression 2)) == (expression 2)) )) ;) (statement (functionCall assert ( (expression (expression (expression 1) / (expression 4)) == (expression 0.25)) )) ;) (statement (functionCall assert ( (expression (expression (expression 999999) % (expression 3)) == (expression 0)) )) ;) (statement (functionCall assert ( (expression (expression (expression - (expression 5)) * (expression - (expression 5))) == (expression 25)) )) ;) (statement (functionCall assert ( (expression (expression (expression (list [ (exprList (expression 1) , (expression 2) , (expression 3)) ])) * (expression 2)) == (expression (list [ (exprList (expression 1) , (expression 2) , (expression 3) , (expression 1) , (expression 2) , (expression 3)) ]))) )) ;) (statement (functionCall assert ( (expression (expression (expression 'ab') * (expression 3)) == (expression "ababab")) )) ;) (statement (functionCall assert ( (expression (expression (expression 2) ^ (expression 10)) == (expression 1024)) )) ;) (statement (functionCall assert ( (expression (expression (expression 3) ^ (expression 3)) == (expression 27)) )) ;) (statement (functionCall assert ( (expression (expression (expression 4) ^ (expression (expression 3) ^ (expression 2))) == (expression 262144)) )) ;) (statement (functionCall assert ( (expression (expression (expression ( (expression (expression 4) ^ (expression 3)) )) ^ (expression 2)) == (expression 4096)) )) ;) (statement (assignment a = (expression 0)) ;) (statement (forStatement for i = (expression 1) to (expression 10) do (block (statement (assignment a = (expression (expression a) + (expression i))) ;)) end)) (statement (functionCall assert ( (expression (expression a) == (expression ( (expression (expression (expression (expression (expression (expression (expression (expression (expression (expression 1) + (expression 2)) + (expression 3)) + (expression 4)) + (expression 5)) + (expression 6)) + (expression 7)) + (expression 8)) + (expression 9)) + (expression 10)) ))) )) ;) (statement (assignment b = (expression - (expression 10))) ;) (statement (assignment c = (expression 0)) ;) (statement (whileStatement while (expression (expression b) < (expression 0)) do (block (statement (assignment c = (expression (expression c) + (expression b))) ;) (statement (assignment b = (expression (expression b) + (expression 1))) ;)) end)) (statement (functionCall assert ( (expression (expression c) == (expression - (expression ( (expression (expression (expression (expression (expression (expression (expression (expression (expression (expression 1) + (expression 2)) + (expression 3)) + (expression 4)) + (expression 5)) + (expression 6)) + (expression 7)) + (expression 8)) + (expression 9)) + (expression 10)) )))) )) ;) (statement (assignment a = (expression 123)) ;) (statement (ifStatement (ifStat if (expression (expression a) > (expression 200)) do (block (statement (functionCall assert ( (expression false) )) ;))) end)) (statement (ifStatement (ifStat if (expression (expression a) < (expression 100)) do (block (statement (functionCall assert ( (expression false) )) ;))) (elseIfStat else if (expression (expression a) > (expression 124)) do (block (statement (functionCall assert ( (expression false) )) ;))) (elseIfStat else if (expression (expression a) < (expression 124)) do (block (statement (functionCall assert ( (expression true) )) ;))) (elseStat else do (block (statement (functionCall assert ( (expression false) )) ;))) end)) (statement (ifStatement (ifStat if (expression false) do (block (statement (functionCall assert ( (expression false) )) ;))) (elseStat else do (block (statement (functionCall assert ( (expression true) )) ;))) end)) (functionDecl def twice ( (idList n) ) (block (statement (assignment temp = (expression (expression n) + (expression n))) ;) return (expression temp) ;) end) (functionDecl def squared ( (idList n) ) (block return (expression (expression n) * (expression n)) ;) end) (functionDecl def squaredAndTwice ( (idList n) ) (block return (expression (functionCall twice ( (exprList (expression (functionCall squared ( (exprList (expression n)) )))) ))) ;) end) (functionDecl def list ( ) (block return (expression (list [ (exprList (expression 7) , (expression 8) , (expression 9)) ])) ;) end) (statement (functionCall assert ( (expression (expression (functionCall squared ( (exprList (expression 666)) ))) == (expression (expression 666) ^ (expression 2))) )) ;) (statement (functionCall assert ( (expression (expression (functionCall twice ( (exprList (expression (functionCall squared ( (exprList (expression 5)) )))) ))) == (expression 50)) )) ;) (statement (functionCall assert ( (expression (expression (functionCall squaredAndTwice ( (exprList (expression 10)) ))) == (expression 200)) )) ;) (statement (functionCall assert ( (expression (expression (functionCall squared ( (exprList (expression (functionCall squared ( (exprList (expression (functionCall squared ( (exprList (expression 2)) )))) )))) ))) == (expression (expression ( (expression (expression ( (expression (expression 2) ^ (expression 2)) )) ^ (expression 2)) )) ^ (expression 2))) )) ;) (statement (functionCall assert ( (expression (expression (functionCall list ( ))) == (expression (list [ (exprList (expression 7) , (expression 8) , (expression 9)) ]))) )) ;) (statement (functionCall assert ( (expression (expression (functionCall size ( (expression (functionCall list ( ))) ))) == (expression 3)) )) ;) (statement (functionCall assert ( (expression (expression (functionCall list ( )) (indexes [ (expression 1) ])) == (expression 8)) )) ;) (functionDecl def sort ( (idList list) ) (block (statement (whileStatement while (expression ! (expression (functionCall sorted ( (exprList (expression list)) )))) do block end))) end) (functionDecl def sorted ( (idList list) ) (block (statement (assignment n = (expression (functionCall size ( (expression list) )))) ;) (statement (forStatement for i = (expression 0) to (expression (expression n) - (expression 2)) do (block (statement (ifStatement (ifStat if (expression (expression list (indexes [ (expression i) ])) > (expression list (indexes [ (expression (expression i) + (expression 1)) ]))) do (block (statement (assignment temp = (expression list (indexes [ (expression (expression i) + (expression 1)) ]))) ;) (statement (assignment list (indexes [ (expression (expression i) + (expression 1)) ]) = (expression list (indexes [ (expression i) ]))) ;) (statement (assignment list (indexes [ (expression i) ]) = (expression temp)) ;) return (expression false) ;)) end))) end)) return (expression true) ;) end) (statement (assignment numbers = (expression (list [ (exprList (expression 3) , (expression 5) , (expression 1) , (expression 4) , (expression 2)) ]))) ;) (statement (functionCall sort ( (exprList (expression numbers)) )) ;) (statement (functionCall assert ( (expression (expression numbers) == (expression (list [ (exprList (expression 1) , (expression 2) , (expression 3) , (expression 4) , (expression 5)) ]))) )) ;) (functionDecl def fib ( (idList n) ) (block (statement (ifStatement (ifStat if (expression (expression n) < (expression 2)) do (block return (expression n) ;)) (elseStat else do (block return (expression (expression (functionCall fib ( (exprList (expression (expression n) - (expression 2))) ))) + (expression (functionCall fib ( (exprList (expression (expression n) - (expression 1))) )))) ;)) end))) end) (statement (functionCall assert ( (expression (expression (functionCall fib ( (exprList (expression 4)) ))) == (expression 3)) )) ;) (statement (assignment sequence = (expression (list [ ]))) ;) (statement (forStatement for i = (expression 0) to (expression 10) do (block (statement (assignment sequence = (expression (expression sequence) + (expression (functionCall fib ( (exprList (expression i)) ))))) ;)) end)) (statement (functionCall assert ( (expression (expression sequence) == (expression (list [ (exprList (expression 0) , (expression 1) , (expression 1) , (expression 2) , (expression 3) , (expression 5) , (expression 8) , (expression 13) , (expression 21) , (expression 34) , (expression 55)) ]))) )) ;) (functionDecl def fib2 ( (idList n) ) (block (statement (ifStatement (ifStat if (expression (expression n) < (expression 2)) do (block return (expression n) ;)) (elseStat else do (block (statement (assignment a = (expression (functionCall fib2 ( (exprList (expression (expression n) - (expression 2))) )))) ;) (statement (assignment c = (expression (functionCall fib2 ( (exprList (expression (expression n) - (expression 1))) )))) ;) return (expression (expression a) + (expression c)) ;)) end))) end) (statement (functionCall assert ( (expression (expression (functionCall fib2 ( (exprList (expression 4)) ))) == (expression 3)) )) ;) (statement (assignment n = (expression (list [ (exprList (expression (list [ (exprList (expression 1) , (expression 0) , (expression 0)) ])) , (expression (list [ (exprList (expression 0) , (expression 1) , (expression 0)) ])) , (expression (list [ (exprList (expression 0) , (expression 0) , (expression 1)) ]))) ]))) ;) (statement (assignment p = (expression (list [ (exprList (expression - (expression 1)) , (expression 'abc') , (expression true)) ]))) ;) (statement (functionCall assert ( (expression (expression 'abc') in (expression p)) )) ;) (statement (functionCall assert ( (expression (expression (list [ (exprList (expression 0) , (expression 1) , (expression 0)) ])) in (expression n)) )) ;) (statement (functionCall assert ( (expression (expression n (indexes [ (expression 0) ] [ (expression 2) ])) == (expression 0)) )) ;) (statement (functionCall assert ( (expression (expression n (indexes [ (expression 1) ] [ (expression 1) ])) == (expression n (indexes [ (expression 2) ] [ (expression 2) ]))) )) ;) (statement (functionCall assert ( (expression p (indexes [ (expression 2) ])) )) ;) (statement (functionCall assert ( (expression (expression p (indexes [ (expression 1) ] [ (expression 2) ])) == (expression 'c')) )) ;) (statement (functionCall println ( (expression "All Assertions have passed.") )) ;)) <EOF>)
