//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrTool\Astra.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class AstraLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, INT=3, DOUBLE=4, STRING=5, ID=6, INTVAL=7, DOUBLEVAL=8, 
		STRINGVAL=9, ADD=10, SUB=11, MUL=12, DIV=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "INT", "DOUBLE", "STRING", "ID", "INTVAL", "DOUBLEVAL", 
		"STRINGVAL", "ADD", "SUB", "MUL", "DIV"
	};


	public AstraLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AstraLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'int'", "'double'", "'string'", null, null, null, 
		null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INT", "DOUBLE", "STRING", "ID", "INTVAL", "DOUBLEVAL", 
		"STRINGVAL", "ADD", "SUB", "MUL", "DIV"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Astra.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstraLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,89,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,5,4,5,51,8,5,11,5,12,5,52,1,6,4,6,56,8,6,11,6,12,6,57,1,7,4,7,61,8,
		7,11,7,12,7,62,1,7,1,7,4,7,67,8,7,11,7,12,7,68,3,7,71,8,7,1,8,1,8,5,8,
		75,8,8,10,8,12,8,78,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		1,0,3,2,0,65,90,97,122,1,0,48,57,1,0,34,34,94,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,
		27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,35,1,0,0,0,9,42,1,0,0,0,11,50,1,
		0,0,0,13,55,1,0,0,0,15,60,1,0,0,0,17,72,1,0,0,0,19,81,1,0,0,0,21,83,1,
		0,0,0,23,85,1,0,0,0,25,87,1,0,0,0,27,28,5,61,0,0,28,2,1,0,0,0,29,30,5,
		59,0,0,30,4,1,0,0,0,31,32,5,105,0,0,32,33,5,110,0,0,33,34,5,116,0,0,34,
		6,1,0,0,0,35,36,5,100,0,0,36,37,5,111,0,0,37,38,5,117,0,0,38,39,5,98,0,
		0,39,40,5,108,0,0,40,41,5,101,0,0,41,8,1,0,0,0,42,43,5,115,0,0,43,44,5,
		116,0,0,44,45,5,114,0,0,45,46,5,105,0,0,46,47,5,110,0,0,47,48,5,103,0,
		0,48,10,1,0,0,0,49,51,7,0,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,
		0,52,53,1,0,0,0,53,12,1,0,0,0,54,56,7,1,0,0,55,54,1,0,0,0,56,57,1,0,0,
		0,57,55,1,0,0,0,57,58,1,0,0,0,58,14,1,0,0,0,59,61,7,1,0,0,60,59,1,0,0,
		0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,70,1,0,0,0,64,66,5,46,0,
		0,65,67,7,1,0,0,66,65,1,0,0,0,67,68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,
		0,69,71,1,0,0,0,70,64,1,0,0,0,70,71,1,0,0,0,71,16,1,0,0,0,72,76,5,34,0,
		0,73,75,8,2,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,
		0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,34,0,0,80,18,1,0,0,0,81,82,5,43,
		0,0,82,20,1,0,0,0,83,84,5,45,0,0,84,22,1,0,0,0,85,86,5,42,0,0,86,24,1,
		0,0,0,87,88,5,47,0,0,88,26,1,0,0,0,7,0,52,57,62,68,70,76,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
