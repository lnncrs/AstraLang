//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrTool\Astra.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="AstraParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public interface IAstraListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] AstraParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] AstraParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] AstraParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] AstraParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] AstraParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] AstraParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] AstraParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] AstraParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] AstraParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] AstraParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.doWhileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhileStatement([NotNull] AstraParser.DoWhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.doWhileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhileStatement([NotNull] AstraParser.DoWhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.inputStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInputStatement([NotNull] AstraParser.InputStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.inputStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInputStatement([NotNull] AstraParser.InputStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.outputStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutputStatement([NotNull] AstraParser.OutputStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.outputStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutputStatement([NotNull] AstraParser.OutputStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] AstraParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] AstraParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="AstraParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] AstraParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="AstraParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] AstraParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] AstraParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] AstraParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] AstraParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] AstraParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] AstraParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] AstraParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntLiteral([NotNull] AstraParser.IntLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntLiteral([NotNull] AstraParser.IntLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleLiteral([NotNull] AstraParser.DoubleLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleLiteral([NotNull] AstraParser.DoubleLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variable</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] AstraParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variable</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] AstraParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParensExpression([NotNull] AstraParser.ParensExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParensExpression([NotNull] AstraParser.ParensExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] AstraParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="AstraParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] AstraParser.MultiplicativeExpressionContext context);
}
